<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2000, 2020, Oracle and/or its affiliates.

  Licensed under the Universal Permissive License v 1.0 as shown at
  http://oss.oracle.com/licenses/upl.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.oracle.coherence.ce</groupId>
    <artifactId>main</artifactId>
    <version>${revision}</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>coherence-docker</artifactId>
  <packaging>jar</packaging>
  <name>Coherence Docker Distribution</name>

  <properties>
    <docker.registry>oraclecoherence</docker.registry>
    <docker.image.name>${docker.registry}/coherence-ce:${project.version.official}</docker.image.name>

    <!-- The class that will be run by the JVM in the image -->
    <main-class>com.tangosol.coherence.docker.Runner</main-class>

    <port.grpc>1408</port.grpc>
    <port.extend>20000</port.extend>
    <port.management>30000</port.management>
    <port.metrics>7001</port.metrics>
  </properties>

  <dependencies>
    <dependency>
      <groupId>${coherence.group.id}</groupId>
      <artifactId>coherence</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${coherence.group.id}</groupId>
      <artifactId>coherence-management</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${coherence.group.id}</groupId>
      <artifactId>coherence-grpc-proxy</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${coherence.group.id}</groupId>
      <artifactId>coherence-mp-metrics</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>io.helidon.microprofile.cdi</groupId>
      <artifactId>helidon-microprofile-cdi</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.grpc</groupId>
      <artifactId>helidon-grpc-core</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.microprofile.bundles</groupId>
      <artifactId>helidon-microprofile-core</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.microprofile.metrics</groupId>
      <artifactId>helidon-microprofile-metrics</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.tracing</groupId>
      <artifactId>helidon-tracing-jaeger</artifactId>
    </dependency>


    <!-- test dependencies -->
    <dependency>
      <groupId>${coherence.group.id}</groupId>
      <artifactId>coherence-testing-support</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${coherence.group.id}</groupId>
      <artifactId>coherence-java-client</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.bedrock</groupId>
      <artifactId>bedrock-runtime</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.bedrock</groupId>
      <artifactId>bedrock-testing-support</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.bedrock.coherence</groupId>
      <artifactId>coherence-12.2.1-testing-support</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.bedrock</groupId>
      <artifactId>bedrock-runtime-docker</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>docker</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>project.docker</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>2.4.0</version>
            <executions>
              <execution>
                <goals>
                  <goal>dockerBuild</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <from>
                    <image>docker://gcr.io/distroless/java:11</image>
                  </from>
                  <to>
                    <image>${docker.image.name}</image>
                  </to>
                  <extraDirectories>
                    <paths>
                      <path>
                        <from>${project.basedir}/src/main/args</from>
                        <into>/args</into>
                      </path>
                    </paths>
                  </extraDirectories>
                  <container>
                    <mainClass>${main-class}</mainClass>
                    <environment>
                      <!-- Setting the COH_MAIN_CLASS environment variable will make the Coherence K8s Operator use
                           the correct main class without needing to specify it the class name in the Coherence
                           resource yaml -->
                      <COH_MAIN_CLASS>${main-class}</COH_MAIN_CLASS>
                      <!-- Jaeger tracing variables -->
                      <JAEGER_SAMPLER_TYPE>const</JAEGER_SAMPLER_TYPE>
                      <JAEGER_SAMPLER_PARAM>1</JAEGER_SAMPLER_PARAM>
                      <JAEGER_SERVICE_NAME>coherence</JAEGER_SERVICE_NAME>
                    </environment>
                    <extraClasspath>
                      <classpath>/coherence/ext/conf</classpath>
                      <classpath>/coherence/ext/lib/*</classpath>
                    </extraClasspath>
                    <jvmFlags>
                      <jvmFlag>-XshowSettings:all</jvmFlag>
                      <jvmFlag>-XX:+PrintCommandLineFlags</jvmFlag>
                      <jvmFlag>-XX:+PrintFlagsFinal</jvmFlag>
                      <jvmFlag>-Dcoherence.log=jdk</jvmFlag>
                      <jvmFlag>-Dcoherence.management.http=all</jvmFlag>
                      <jvmFlag>-Dcoherence.management.http.port=${port.management}</jvmFlag>
                      <jvmFlag>-Dcoherence.extend.port=${port.extend}</jvmFlag>
                      <jvmFlag>-Dcoherence.ttl=0</jvmFlag>
                      <jvmFlag>-Dcoherence.tracing.ratio=1</jvmFlag>
                      <jvmFlag>@/args/jvm-args.txt</jvmFlag>
                    </jvmFlags>
                    <ports>
                      <port>${port.grpc}</port>
                      <port>${port.metrics}</port>
                      <port>${port.management}</port>
                      <port>${port.extend}</port>
                    </ports>
                  </container>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>docker-test</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>project.docker</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <skip>false</skip>
              <skipTests>false</skipTests>
              <systemProperties>
                <docker.image.name>${docker.image.name}</docker.image.name>
                <port.grpc>${port.grpc}</port.grpc>
                <port.extend>${port.extend}</port.extend>
                <port.management>${port.management}</port.management>
                <port.metrics>${port.metrics}</port.metrics>
              </systemProperties>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemProperties>
                <skip>false</skip>
                <skipTests>false</skipTests>
                <docker.image.name>${docker.image.name}</docker.image.name>
                <port.grpc>${port.grpc}</port.grpc>
                <port.extend>${port.extend}</port.extend>
                <port.management>${port.management}</port.management>
                <port.metrics>${port.metrics}</port.metrics>
              </systemProperties>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
